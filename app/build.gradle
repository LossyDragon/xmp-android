apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'dagger.hilt.android.plugin'
apply plugin: "org.jlleitschuh.gradle.ktlint"

// https://developer.android.com/ndk/downloads
android {
    compileSdkVersion 29
    ndkVersion "21.4.7075529"

    defaultConfig {
        applicationId "org.helllabs.android.xmp"
        minSdkVersion 21
        //noinspection OldTargetApi
        targetSdkVersion 29

        versionCode = 87
        versionName = "4.12.0"

        externalNativeBuild.cmake {
            abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
        }

        // ModArchive API Key
        // Must be in your global gradle.properties. ex: C:\Users\<name>\.gradle
        buildConfigField("String", "API_KEY", "$modArchiveApiKey")
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-project.txt'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    externalNativeBuild {
        ndkBuild.path 'src/main/cpp/Android.mk'
    }

    // Hush ExperimentalCoroutinesApi
    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs += "-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi"
    }

    // Removes:  Coroutines debug artifact
    packagingOptions {
        exclude "DebugProbesKt.bin"
    }

    // View binding
    buildFeatures {
        viewBinding true
        dataBinding true
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    // Android Support Libs
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.preference:preference-ktx:1.1.1'
    implementation "androidx.media:media:1.2.1"
    implementation 'com.google.android.material:material:1.3.0'

    // AIDL-like replacement.
    implementation 'org.greenrobot:eventbus:3.2.0'

    // Dep Injection
    implementation "androidx.hilt:hilt-lifecycle-viewmodel:1.0.0-alpha03"
    implementation "com.google.dagger:hilt-android:$hilt_android"
    kapt "com.google.dagger:hilt-compiler:$hilt_android"

    // Coroutines
    def coroutines = "1.4.2"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines"

    // Http & Download
    implementation 'androidx.tonyodev.fetch2:xfetch2:3.1.6'
    implementation "androidx.tonyodev.fetch2okhttp:xfetch2okhttp:3.1.6"
    implementation "com.squareup.okhttp3:okhttp:4.9.0"
    implementation "com.squareup.retrofit2:retrofit:2.9.0"

    // Retrofit XML Parsing
    def tikXml = '0.8.13'
    implementation("com.tickaroo.tikxml:annotation") { version { strictly "$tikXml" } }
    implementation("com.tickaroo.tikxml:retrofit-converter") { version { strictly "$tikXml" } }
    kapt("com.tickaroo.tikxml:processor") { version { strictly "$tikXml" } }

    // Other Libs
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'com.github.razir.progressbutton:progressbutton:2.1.0'
    implementation 'com.afollestad.material-dialogs:core:3.3.0'
    implementation 'com.afollestad.material-dialogs:input:3.3.0'

    // LeakCanary
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.6'
}

ktlint {
    android = true
    // Ignore: wildcard imports
    disabledRules = ["no-wildcard-imports"]
}

// Run KtLint checker
task runKtlintCheck(type: Exec) {
    workingDir '../'
    commandLine 'cmd', '/c', 'gradlew ktlintCheck'
}

// Run KtLint formatter
task runKtlintFormat(type: Exec) {
    workingDir '../'
    commandLine 'cmd', '/c', 'gradlew ktlintFormat'
}

// Completely remove libxmp folder and clone a new copy.
task getLibxmp(type: Exec) {
    def args = "rm -rf libxmp && git clone https://github.com/libxmp/libxmp.git && exit"
    workingDir '../app/src/main/cpp'
    commandLine 'bash', '-c', args
}

// Build libxmp's object files
task buildLibXmp(type: Exec) {
    def args = "autoconf && ./configure && make && make check && (cd test-dev; autoconf && ./configure && make) && exit"
    workingDir '../app/src/main/cpp/libxmp'
    commandLine 'bash', '-c', args
}
